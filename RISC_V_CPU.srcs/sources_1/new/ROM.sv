`timescale 1ns / 1ps

module ROM (
    input  logic [31:0] addr,
    output logic [31:0] data
);

    logic [31:0] rom[0:2**7 - 1];

    initial begin
        // 전 슬롯 NOP(ADDI x0,x0,0) 초기화
        for (int i = 0; i < 2 ** 7; i++) rom[i] = 32'h0000_0013;

        // ===================== R-Type (0 ~ 9) =====================
        //  funct7(7) | rs2(5) | rs1(5) | funct3(3) | rd(5) | opcode(7)
        rom[0] = 32'b0000000_00001_00010_000_00100_0110011;     // ADD                 
        rom[1] = 32'b0100000_00001_00010_000_00101_0110011;     // SUB        
        rom[2] = 32'b0000000_00001_00010_001_00110_0110011;     // SLL        
        rom[3] = 32'b0000000_00001_00010_101_00111_0110011;     // SRL        
        rom[4] = 32'b0100000_00001_00010_101_01000_0110011;     // SRA        
        rom[5] = 32'b0000000_00001_00010_010_01001_0110011;     // SLT        
        rom[6] = 32'b0000000_00001_00010_011_01010_0110011;     // SLTU       
        rom[7] = 32'b0000000_00001_00010_100_01011_0110011;     // XOR        
        rom[8] = 32'b0000000_00001_00010_110_01100_0110011;     // OR         
        rom[9] = 32'b0000000_00001_00010_111_01101_0110011;     // AND        

        // ===================== I-Type (10 ~ 18) ====================
        //  imm[11:0] | rs1(5) | funct3(3) | rd(5) | opcode(7)
        rom[10] = 32'b111111111000_00010_000_10011_0010011;     // ADDI    
        rom[11] = 32'b111111111100_00010_010_10100_0010011;     // SLTI    
        rom[12] = 32'b111111111100_00010_011_10101_0010011;     // SLTIU   
        rom[13] = 32'b000000000100_00010_100_10110_0010011;     // XORI    
        rom[14] = 32'b000000000100_00010_110_10111_0010011;     // ORI     
        rom[15] = 32'b000000000100_00010_111_11000_0010011;     // ANDI    
        rom[16] = 32'b000000000001_00010_001_11001_0010011;     // SLLI    
        rom[17] = 32'b000000000001_00100_101_11010_0010011;     // SRLI    
        rom[18] = 32'b010000000001_00100_101_11011_0010011;     // SRAI    

        // ===================== S-Type (19 ~ 21) ====================
        //  imm[11:5] | rs2(5)=x19 | rs1(5)=x0 | funct3 | imm[4:0] | opcode
        rom[19] = 32'b0000000_10011_00000_010_10000_0100011;    // SW 
        rom[20] = 32'b0000000_10011_00000_000_10000_0100011;    // SB 
        rom[21] = 32'b0000000_10011_00000_001_10000_0100011;    // SH 

        // ===================== L-Type (22 ~ 26) ====================
        //  imm[11:0] | rs1(5) | funct3(3) | rd(5) | opcode(7)
        rom[22] = 32'b000000010000_00000_000_01110_0000011;     // LB             
        rom[23] = 32'b000000010000_00000_001_01111_0000011;     // LH             
        rom[24] = 32'b000000010000_00000_010_10000_0000011;     // LW             
        rom[25] = 32'b000000010000_00000_100_10001_0000011;     // LBU            
        rom[26] = 32'b000000010000_00000_101_10010_0000011;     // LHU           

        // ===================== U-Type (27 ~ 28) ====================
        //  imm | rd(5) | opcode(7)
        rom[27] = 32'b00000000000000000001_11100_0110111;       // LUI             
        rom[28] = 32'b00000000000000000001_11101_0010111;       // AUIPC            


        // ===================== J-Type (29 ~ 30) ====================
        //  imm | rd(5) | opcode(7)
        rom[29] = 32'b0_0000000100_0_00000000_11110_1101111;    // JAL        
        rom[30] = 32'b000010001010_00100_000_11111_1100111;     // JALR       

        // ===================== B-Type (31 ~ 36) =====================
        //  imm[12] | imm[10:5] | rs2(5) | rs1(5) | funct3(3) | imm[4:1] | imm[11] | opcode(7)
        rom[31] = 32'b0_000000_00001_00001_000_1000_0_1100011;  // BEQ   
        rom[32] = 32'b0_000000_00001_00010_001_1000_0_1100011;  // BNE   
        rom[33] = 32'b0_000000_00001_00010_100_1000_0_1100011;  // BLT   
        rom[34] = 32'b0_000000_00001_00010_101_1000_0_1100011;  // BGE   
        rom[35] = 32'b0_000000_00001_00010_110_1000_0_1100011;  // BLTU  
        rom[36] = 32'b0_000000_00001_00010_111_1000_0_1100011;  // BGEU  


    end

    assign data = rom[addr[31:2]];
endmodule


